#include <iostream>
#include <string>
#include <cctype>
#include <cstdlib>
#include <vector>
#include "grid.h"
#include "player.h"
#include "room.h"
#include "pit.h"
#include "event.h"
#include "bats.h"
#include "misc.h"
#include "gold.h"
#include "wumpus.h"

using namespace std;

int check_int(string check){
  int checked = 0;
  for(int i = 0;i < check.length();i++){
    if(isalpha(check[i]))
    return 0;
  }
  checked = atoi(check.c_str());
  return checked;
}

void debug(int height, int length){
  int randx = 0;
  int randy = 0;
  bool choi = true;

  vector<vector<room> > rooms(height);
  for(int i = 0;i < height;i++)
    rooms[i] = vector<room>(length);

  srand(time(NULL));
  randx = (rand() % length);
  randy = (rand() % height);

  grid g1(height,length);
  player p1(randx,randy);
 
  set_rooms(rooms,height,length,randx,randy);

  while(true){
    g1.display_debug(rooms,p1.get_x(),p1.get_y(),randx,randy);
    for(int i = 0;i < height;i++){
      for(int j = 0;j < length;j++){
        rooms[i][j].detect(p1.get_x(),p1.get_y());
        hazards(rooms,height,length,p1,rooms[i][j].action(p1.get_x(),p1.get_y()),randx,randy,choi);
      }
    }
    system("clear");
    g1.display_debug(rooms,p1.get_x(),p1.get_y(),randx,randy);
    cout << "here" << endl;
    for(int i = 0;i < height;i++){ 
      for(int j = 0;j < length;j++){
        rooms[i][j].detect(p1.get_x(),p1.get_y());
      }
    }
    while(true){
      if(rooms[p1.get_x()][p1.get_y()].get_name() != "event")
        hazards(rooms,height,length,p1,rooms[p1.get_x()][p1.get_y()].action(p1.get_x(),p1.get_y()),randx,randy,choi);
      else if(rooms[p1.get_x()][p1.get_y()].get_name() == "event")
        break;
      else 
        break;
    }
    p1.move(height,length);
    system("clear");
    

  }
}

void game(int height,int length){
  int randx = 0;
  int randy = 0;
  bool choi = false;

  vector<vector<room> > rooms(height);
  for(int i = 0;i < height;i++)
    rooms[i] = vector<room>(length);
  
  srand(time(NULL));
  randx = (rand() % length);
  randy = (rand() % height);

  grid g1(height,length);
  player p1(randx,randy);  
 
  set_rooms(rooms,height,length,randx,randy);

  while(true){
    g1.display(p1.get_x(),p1.get_y(),randx,randy);
    for(int i = 0;i < height;i++){
      for(int j = 0;j < length;j++){
        rooms[i][j].detect(p1.get_x(),p1.get_y());
        hazards(rooms,height,length,p1,rooms[i][j].action(p1.get_x(),p1.get_y()),randx,randy,choi);
      }
    }
    system("clear");
    g1.display(p1.get_x(),p1.get_y(),randx,randy);
    for(int i = 0;i < height;i++){
      for(int j = 0;j < length;j++){
        rooms[i][j].detect(p1.get_x(),p1.get_y());
      }
    while(true){
      if(rooms[p1.get_x()][p1.get_y()].get_name() != "event")
        hazards(rooms,height,length,p1,rooms[p1.get_x()][p1.get_y()].action(p1.get_x(),p1.get_y()),randx,randy,choi);
      else if(rooms[p1.get_x()][p1.get_y()].get_name() == "event")
        break;
    p1.move(height,length);
    system("clear"); 
    }
    }
  }
}

void game_over(vector<vector<room> > rooms,int height,int length,int p_x,int p_y,bool choi){
  int choice = 0; 

  cout << "GAME OVER" << endl;
  cout << "What would you like to do?" << endl;
  cout << "Press 1 to play again with same settings, press 2 to play with different settings" << endl;
  cout << "Press 3 to exit: ";
  cin >> choice;

  switch(choice){
    case 1 :   
      if(choi == false)
        game_rooms(rooms,height,length,p_x,p_y);
      else if(choi == true)
        game_room_debug(rooms,height,length,p_x,p_y);
    case 2 :
      if(choi == false) 
        game(height,length);
      else if(choi == true)
        debug(height,length);
    case 3 :
      exit(0);
  }
}

void set_rooms(vector<vector<room> > &rooms,int height, int length,int p_x,int p_y){
  event* event1 = new event;
  pit* pit1 = new pit;
  bats* bat1 = new bats;
  gold* gold1 = new gold;
  wumpus* wumpus1 = new wumpus;
  int randx = 0;
  int randy = 0;
  

  for(int i = 0;i < height;i++){
    for(int j = 0;j < length;j++){
      rooms[i][j].set_x(j);
      rooms[i][j].set_y(i);
      rooms[i][j].set_event(event1);
      rooms[i][j].set_name("event");
    }
  }

  for(int i = 0;i < 2;i++){ 
    srand(time(NULL));
    randx = (rand() % length);
    randy = (rand() % height);
    if((randx == p_x) && (randy == p_y))
      i--;
    else if(rooms[randy][randx].get_event() != pit1){
      rooms[randy][randx].set_event(pit1);
      rooms[randy][randx].set_name("pit");
    }else
      i--;
    }

   for(int i = 0;i < 2;i++){
     srand(time(NULL));
     randx = (rand() % length);
     randy = (rand() % height);
     if((randx == p_x) && (randy == p_y))
       i--;
     else if((rooms[randy][randx].get_event() != pit1) && (rooms[randy][randx].get_event() != bat1)){
       rooms[randy][randx].set_event(bat1);
       rooms[randy][randx].set_name("bats");
     }else
       i--;
   }
    
   for(int i = 0;i < 1;i++){
     srand(time(NULL));
     randx = (rand() % length);
     randy = (rand() % height);
     if((randx == p_x) && (randy == p_y))
       i--;
     else if((rooms[randy][randx].get_event() != pit1) && (rooms[randy][randx].get_event() != bat1)){
       rooms[randy][randx].set_event(gold1);
       rooms[randy][randx].set_name("gold");
     }else
       i--;
     }

   for(int i = 0;i < 1;i++){
     srand(time(NULL));
     randx = (rand() % length);
     randy = (rand() % height);
     if((randx == p_x) && (randy == p_y))
       i--;
     else if((rooms[randy][randx].get_event() != pit1) && ((rooms[randy][randx].get_event() != bat1) && (rooms[randy][randx].get_event() != gold1))){
       rooms[randy][randx].set_event(wumpus1);
       rooms[randy][randx].set_name("wump");
     }else
       i--;
     }

    
  }

void game_rooms(vector<vector<room> > rooms,int height,int length,int p_x,int p_y){
   grid g1(height,length);
   player p1(p_x,p_y);
   bool choi = false;

    while(true){
    g1.display(p1.get_x(),p1.get_y(),p_x,p_y);
    for(int i = 0;i < height;i++){
      for(int j = 0;j < length;j++){
        rooms[i][j].detect(p1.get_x(),p1.get_y());
        hazards(rooms,height,length,p1,rooms[i][j].action(p1.get_x(),p1.get_y()),p_x,p_y,choi);
      }
    }
    system("clear");
    g1.display(p1.get_x(),p1.get_y(),p_x,p_y);
    for(int i = 0;i < height;i++){
      for(int j = 0;j < length;j++){
        rooms[i][j].detect(p1.get_x(),p1.get_y());
      }
    }
    while(true){
      if(rooms[p1.get_x()][p1.get_y()].get_name() != "event")
        hazards(rooms,height,length,p1,rooms[p1.get_x()][p1.get_y()].action(p1.get_x(),p1.get_y()),p_x,p_y,choi);
      else if(rooms[p1.get_x()][p1.get_y()].get_name() == "event")
        break;

    p1.move(height,length);
    system("clear");
    }
  }
}

void game_room_debug(vector<vector<room> > rooms,int height, int length, int p_x,int p_y){
   grid g1(height,length);
   player p1(p_x,p_y);
   bool choi = true;

    while(true){
    g1.display_debug(rooms,p1.get_x(),p1.get_y(),p_x,p_y);
    for(int i = 0;i < height;i++){
      for(int j = 0;j < length;j++){
        rooms[i][j].detect(p1.get_x(),p1.get_y());
        hazards(rooms,height,length,p1,rooms[i][j].action(p1.get_x(),p1.get_y()),p_x,p_y,choi);
      }
    }
    system("clear");
    g1.display_debug(rooms,p1.get_x(),p1.get_y(),p_x,p_y);
    for(int i = 0;i < height;i++){
      for(int j = 0;j < length;j++){
        rooms[i][j].detect(p1.get_x(),p1.get_y());
      }
    }
    while(true){
      if(rooms[p1.get_x()][p1.get_y()].get_name() != "event")
        hazards(rooms,height,length,p1,rooms[p1.get_x()][p1.get_y()].action(p1.get_x(),p1.get_y()),p_x,p_y,choi);
      else if(rooms[p1.get_x()][p1.get_y()].get_name() == "event")
        break;
    }
    p1.move(height,length);
    system("clear");
  }
}

void hazards(vector<vector<room> > &rooms,int height,int length,player &p1,int action,int in_x,int in_y,bool choi){
  int randx = 0;
  int randy = 0;

  switch(action){
    case 0:
      break;
    case 1:
      game_over(rooms,height,length,in_x,in_y,choi);
      break;
    case 2:
      srand(time(NULL));
      randx = (rand() % length);
      randy = (rand() % height);
      
      p1.set_x(randx);
      p1.set_y(randy);
      break;
    case 3:
      game_over(rooms,height,length,in_x,in_y,choi);
      break;
    case 4:
      break;
  }
}  

